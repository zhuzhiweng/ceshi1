<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Jul 26 01:41:04 2021
<BR><P>
<H3>Maximum Stack Usage =        684 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
sim_net_task &rArr; sim_net_ctr &rArr; update_firmware &rArr; is_update_firmware1 &rArr; at_cftrantx &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[61]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">rt_alloc_box</a><BR>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3a]">ADC3_4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from can.o(i.CAN2_RX0_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5f]">COMP7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5d]">COMP_1_2_3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5e]">COMP_4_5_6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[57]">DMA1_Channel8_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[43]">DMA2_Channel1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[44]">DMA2_Channel2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[45]">DMA2_Channel3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[46]">DMA2_Channel4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[47]">DMA2_Channel5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[50]">DMA2_Channel7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[58]">DMA2_Channel8_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[59]">DVP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[91]">Datong_TEMP_LQY</a> from uds.o(i.Datong_TEMP_LQY) referenced from uds.o(.constdata)
 <LI><a href="#[93]">Datong_engineTorq</a> from uds.o(i.Datong_engineTorq) referenced from uds.o(.constdata)
 <LI><a href="#[92]">Datong_enginefuelFlow</a> from uds.o(i.Datong_enginefuelFlow) referenced from uds.o(.constdata)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from wkup.o(i.EXTI0_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[a6]">GB17691_task</a> from gb17691a.o(i.GB17691_task) referenced from gb17691a.o(.constdata)
 <LI><a href="#[a5]">Get07_45data</a> from uds.o(i.Get07_45data) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[a3]">GetNOX_benchi</a> from uds.o(i.GetNOX_benchi) referenced from uds.o(.constdata)
 <LI><a href="#[95]">GetNoxContestJieFang</a> from uds.o(i.GetNoxContestJieFang) referenced from uds.o(.constdata)
 <LI><a href="#[a0]">GetNoxContest_HengHe</a> from uds.o(i.GetNoxContest_HengHe) referenced from uds.o(.constdata)
 <LI><a href="#[9b]">GetNoxContest_KaiLong</a> from uds.o(i.GetNoxContest_KaiLong) referenced from uds.o(.constdata)
 <LI><a href="#[83]">GetNoxContest_KaiRuiWeiKeSi</a> from uds.o(i.GetNoxContest_KaiRuiWeiKeSi) referenced from uds.o(.constdata)
 <LI><a href="#[94]">GetScrTempJieFang</a> from uds.o(i.GetScrTempJieFang) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[98]">GetScrTemp_256A_B_Div10_Sub273</a> from uds.o(i.GetScrTemp_256A_B_Div10_Sub273) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[9f]">GetScrTemp_HengHe</a> from uds.o(i.GetScrTemp_HengHe) referenced from uds.o(.constdata)
 <LI><a href="#[9a]">GetScrTemp_KaiLong</a> from uds.o(i.GetScrTemp_KaiLong) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[82]">GetScrTemp_KaiRuiWeiKeSi</a> from uds.o(i.GetScrTemp_KaiRuiWeiKeSi) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[7d]">GetUdsData_100D_Div250</a> from uds.o(i.GetUdsData_100D_Div250) referenced from uds.o(.constdata)
 <LI><a href="#[7c]">GetUdsData_16777216A_65536B_256C_D_Sub270</a> from uds.o(i.GetUdsData_16777216A_65536B_256C_D_Sub270) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[7a]">GetUdsData_256A_B</a> from uds.o(i.GetUdsData_256A_B) referenced 8 times from uds.o(.constdata)
 <LI><a href="#[80]">GetUdsData_256A_B_Div100</a> from uds.o(i.GetUdsData_256A_B_Div100) referenced from uds.o(.constdata)
 <LI><a href="#[97]">GetUdsData_256A_B_Div2</a> from uds.o(i.GetUdsData_256A_B_Div2) referenced 4 times from uds.o(.constdata)
 <LI><a href="#[7e]">GetUdsData_256A_B_Div4</a> from uds.o(i.GetUdsData_256A_B_Div4) referenced from uds.o(.constdata)
 <LI><a href="#[8d]">GetUdsData_256A_B_KaiDeSi</a> from uds.o(i.GetUdsData_256A_B_KaiDeSi) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[7f]">GetUdsData_256A_B_Mul625_Div10000_Sub40</a> from uds.o(i.GetUdsData_256A_B_Mul625_Div10000_Sub40) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[7b]">GetUdsData_256A_B_sign</a> from uds.o(i.GetUdsData_256A_B_sign) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[88]">GetUdsData_ISO15031_100A_Div255</a> from uds.o(i.GetUdsData_ISO15031_100A_Div255) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[8a]">GetUdsData_ISO15031_100B_Div255</a> from uds.o(i.GetUdsData_ISO15031_100B_Div255) referenced from uds.o(.constdata)
 <LI><a href="#[87]">GetUdsData_ISO15031_256A_B_Div10</a> from uds.o(i.GetUdsData_ISO15031_256A_B_Div10) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[86]">GetUdsData_ISO15031_256A_B_Div10_Sub40</a> from uds.o(i.GetUdsData_ISO15031_256A_B_Div10_Sub40) referenced 4 times from uds.o(.constdata)
 <LI><a href="#[85]">GetUdsData_ISO15031_256A_B_Div4</a> from uds.o(i.GetUdsData_ISO15031_256A_B_Div4) referenced 3 times from uds.o(.constdata)
 <LI><a href="#[9d]">GetUdsData_ISO15031_256A_B_Mul99_Div1000</a> from uds.o(i.GetUdsData_ISO15031_256A_B_Mul99_Div1000) referenced 2 times from uds.o(.constdata)
 <LI><a href="#[89]">GetUdsData_ISO15031_256B_C</a> from uds.o(i.GetUdsData_ISO15031_256B_C) referenced from uds.o(.constdata)
 <LI><a href="#[8b]">GetUdsData_YiLiLanJie</a> from uds.o(i.GetUdsData_YiLiLanJie) referenced 4 times from uds.o(.constdata)
 <LI><a href="#[90]">GetUdsSpeed_BoShiYuChai</a> from uds.o(i.GetUdsSpeed_BoShiYuChai) referenced from uds.o(.constdata)
 <LI><a href="#[9e]">GetUdsSpeed_HengHe</a> from uds.o(i.GetUdsSpeed_HengHe) referenced from uds.o(.constdata)
 <LI><a href="#[8c]">GetUdsSpeed_KaiDeSi</a> from uds.o(i.GetUdsSpeed_KaiDeSi) referenced from uds.o(.constdata)
 <LI><a href="#[99]">GetUdsSpeed_KaiLong</a> from uds.o(i.GetUdsSpeed_KaiLong) referenced from uds.o(.constdata)
 <LI><a href="#[81]">GetUdsSpeed_KaiRuiWeiKeSi</a> from uds.o(i.GetUdsSpeed_KaiRuiWeiKeSi) referenced from uds.o(.constdata)
 <LI><a href="#[8e]">GetUdsUreaLiquidLevel_KaiDeSi</a> from uds.o(i.GetUdsUreaLiquidLevel_KaiDeSi) referenced from uds.o(.constdata)
 <LI><a href="#[96]">GetUreaLiquidLevelJieFang</a> from uds.o(i.GetUreaLiquidLevelJieFang) referenced from uds.o(.constdata)
 <LI><a href="#[a2]">GetUreaLiquidLevel_50Ling</a> from uds.o(i.GetUreaLiquidLevel_50Ling) referenced from uds.o(.constdata)
 <LI><a href="#[a1]">GetUreaLiquidLevel_HengHe</a> from uds.o(i.GetUreaLiquidLevel_HengHe) referenced from uds.o(.constdata)
 <LI><a href="#[9c]">GetUreaLiquidLevel_KaiLong</a> from uds.o(i.GetUreaLiquidLevel_KaiLong) referenced from uds.o(.constdata)
 <LI><a href="#[84]">GetUreaLiquidLevel_KaiRuiWeiKeSi</a> from uds.o(i.GetUreaLiquidLevel_KaiRuiWeiKeSi) referenced from uds.o(.constdata)
 <LI><a href="#[a4]">GetUreaLiquidLevel_benchi</a> from uds.o(i.GetUreaLiquidLevel_benchi) referenced from uds.o(.constdata)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[79]">HeartResponse</a> from uds.o(i.HeartResponse) referenced 18 times from uds.o(.constdata)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[52]">I2C3_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[51]">I2C3_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[54]">I2C4_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[53]">I2C4_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5b]">MMU_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4e]">QSPI_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[60]">RSRAM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[34]">RTCAlarm_IRQHandler</a> from rtc.o(i.RTCAlarm_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5a]">SAC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[63]">SystemInit</a> from system_n32g45x.o(i.SystemInit) referenced from startup_n32g45x.o(.text)
 <LI><a href="#[d]">TAMPER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[24]">TIM1_UP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[41]">TIM6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[37]">TIM8_UP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5c]">TSC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from gps.o(i.UART4_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from sim_uart.o(i.UART5_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[55]">UART6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from uart.o(i.USART1_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[35]">USBWakeUp_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1f]">USB_LP_CAN1_RX0_IRQHandler</a> from can.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[8f]">UpLinkResponse</a> from uds.o(i.UpLinkResponse) referenced 9 times from uds.o(.constdata)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3b]">XFMC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[64]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32g45x.o(.text)
 <LI><a href="#[66]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[67]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[65]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[69]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[6a]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[6a]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[68]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[a9]">main</a> from main.o(i.main) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[78]">obd_task</a> from obd.o(i.obd_task) referenced from obd.o(.constdata)
 <LI><a href="#[77]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[a8]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[76]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[61]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm4.o(.emb_text)
 <LI><a href="#[62]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm4.o(.emb_text)
 <LI><a href="#[a7]">sim_net_task</a> from sim_net.o(i.sim_net_task) referenced from sim_net.o(.constdata)
 <LI><a href="#[6b]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[6c]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[6d]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[6e]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[6f]">svcMutexCreate</a> from rt_cmsis.o(i.svcMutexCreate) referenced from rt_cmsis.o(i.osMutexCreate)
 <LI><a href="#[70]">svcMutexRelease</a> from rt_cmsis.o(i.svcMutexRelease) referenced from rt_cmsis.o(i.osMutexRelease)
 <LI><a href="#[71]">svcMutexWait</a> from rt_cmsis.o(i.svcMutexWait) referenced from rt_cmsis.o(i.osMutexWait)
 <LI><a href="#[72]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[73]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[74]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[75]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(.text)
</UL>
<P><STRONG><a name="[2ae]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[aa]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2af]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2b0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2b1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2b2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ac]"></a>_main_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _main_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[2b3]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[295]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[2b4]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[2b5]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[2b6]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>COMP_1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>COMP_4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DVP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>RSRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>XFMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939SendMsg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939PgnDisSend
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939PgnDisDone
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SendMsg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765EnPidSend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765DisPidSend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765DisPidDone
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_15765_09_SID
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2b7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsJ1939PgnDoneEn
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsISO15765PidDoneEn
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2b8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Diagnosis_Infor_t
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SM2id
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GB17691_gps_info
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_register
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_VIN_Info
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_OBD_Info
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_idstate
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_device_info1
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpgetfile
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpget
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlatformPublicKey_32Bytes
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlatformPublicKey
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_info
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Vehicle_Infor_t
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Engine_Infor_t
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Aftertreatment_Infor_t
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkvin_SetUds
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_analysis
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httppreadfile
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsdel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fscd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftrantx
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpgetfile
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpget
</UL>

<P><STRONG><a name="[2b9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Diagnosis_Infor_t
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obd_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_VIN_Info
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_OBD_Info
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2ba]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obd_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsSendReqCmd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsSendHeartWithoutResponse
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SendFrameFlowCmd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsReqServer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsCheckPid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolMatch
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_gprmc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_gngga
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketWrite
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_firmware_info
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketRead
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_device_info1
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httppreadfile
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httppara
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsdel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fscd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftrantx
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpscacherd_To_UART
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpscacherd
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpgetfile
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpget
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cfslogin
</UL>

<P><STRONG><a name="[2bc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[206]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_str_to_float
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_register
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scanf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_device_info1
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsdel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fscd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftrantx
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpgetfile
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpget
</UL>

<P><STRONG><a name="[1ea]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SimcomModleVer
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_device_info1
</UL>

<P><STRONG><a name="[121]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_gprmc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_gngga
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkvin_SetUds
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpget
</UL>

<P><STRONG><a name="[bb]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_gprmc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_gngga
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketRead
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSocket
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httppreadfile
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httpaction
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpgetfile
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cfslogin
</UL>

<P><STRONG><a name="[bd]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[d6]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[d5]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[c3]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_engineTorq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_str_to_float
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_TEMP_LQY
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_engineTorq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_TEMP_LQY
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPenaltyZone
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_str_to_float
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GB17691_gps_info
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUreaLiquidLevel_50Ling
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_str_to_float
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_engineTorq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_TEMP_LQY
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUreaLiquidLevel_50Ling
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_str_to_float
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUreaLiquidLevel_50Ling
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_engineTorq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_TEMP_LQY
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPenaltyZone
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GB17691_gps_info
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2bd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2be]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[bc]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[65]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[2bf]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2c0]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c8]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[229]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2c1]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[228]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2c2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[d4]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[2c3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>ADC_ConfigRegularChannel</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, n32g45x_adc.o(i.ADC_ConfigRegularChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_ConfigRegularChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[d7]"></a>ADC_Configuration</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, bsp.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_Configuration &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatusNew
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableSoftwareStartConv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigRegularChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>ADC_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_adc.o(i.ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[e1]"></a>ADC_EnableSoftwareStartConv</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_adc.o(i.ADC_EnableSoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[e0]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[25d]"></a>ADC_GetDat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_adc.o(i.ADC_GetDat))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
</UL>

<P><STRONG><a name="[de]"></a>ADC_GetFlagStatusNew</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_adc.o(i.ADC_GetFlagStatusNew))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[db]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, n32g45x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[df]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[15a]"></a>BKP_ReadBkpData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32g45x_bkp.o(i.BKP_ReadBkpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBkpData
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_set_time
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_big_heart
</UL>

<P><STRONG><a name="[15f]"></a>BKP_WriteBkpData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, n32g45x_bkp.o(i.BKP_WriteBkpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBkpData
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_set_time
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_big_heart_time
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_big_heart
</UL>

<P><STRONG><a name="[e7]"></a>BOOL_data_put_buf</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, gb17691a.o(i.BOOL_data_put_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = BOOL_data_put_buf &rArr; GB17691_get_BOOLdatastream_Info &rArr; get_GB17691_gps_info &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_imei
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_stamp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketWrite
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBCC_FromBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_send_data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_VIN_Info
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_OBD_Info
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_BOOLdatastream_Info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_BOOLcustom_Info
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>CAN1SendMsg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, can.o(i.CAN1SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN1SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitSTS
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TianDiCheRen_Sensor_Send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F101_Sensor_Send
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SendFrameFlowCmd
</UL>

<P><STRONG><a name="[110]"></a>CAN1_InitFilter</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, n32g45x_can.o(i.CAN1_InitFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN1_InitFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1ModeInit
</UL>

<P><STRONG><a name="[f6]"></a>CAN1test</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, terminaltest.o(i.CAN1test))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN1test
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_imei
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>CAN2SendMsg</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, can.o(i.CAN2SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitSTS
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitMessage
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CancelTransmitMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanMsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsSendReqCmd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsSendHeartWithoutResponse
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SendFrameFlowCmd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsReqServer
</UL>

<P><STRONG><a name="[113]"></a>CAN2_InitFilter</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, n32g45x_can.o(i.CAN2_InitFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN2_InitFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2ModeInit
</UL>

<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, can.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; CAN_ReceiveMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReceiveMessage
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PendingMessage
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEmptyBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>CAN_CancelTransmitMessage</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, n32g45x_can.o(i.CAN_CancelTransmitMessage))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2SendMsg
</UL>

<P><STRONG><a name="[fc]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, n32g45x_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2ModeInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1ModeInit
</UL>

<P><STRONG><a name="[111]"></a>CAN_INTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_can.o(i.CAN_INTConfig))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2ModeInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1ModeInit
</UL>

<P><STRONG><a name="[117]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, n32g45x_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSetBaud
</UL>

<P><STRONG><a name="[f9]"></a>CAN_PendingMessage</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n32g45x_can.o(i.CAN_PendingMessage))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>CAN_ReceiveMessage</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, n32g45x_can.o(i.CAN_ReceiveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_ReceiveMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>CAN_TransmitMessage</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, n32g45x_can.o(i.CAN_TransmitMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TransmitMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2SendMsg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1SendMsg
</UL>

<P><STRONG><a name="[f5]"></a>CAN_TransmitSTS</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, n32g45x_can.o(i.CAN_TransmitSTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TransmitSTS
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2SendMsg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1SendMsg
</UL>

<P><STRONG><a name="[100]"></a>COM_CMD_analysis</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, uart.o(i.COM_CMD_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = COM_CMD_analysis &rArr; comupdate_check_crc32 &rArr; CalcCRC32 &rArr; read_data_from_flash &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_RESET
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_firmware_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_flash_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comupdate_check_crc32
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_check
</UL>

<P><STRONG><a name="[109]"></a>COM_CMD_check</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, uart.o(i.COM_CMD_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = COM_CMD_check &rArr; COM_CMD_analysis &rArr; comupdate_check_crc32 &rArr; CalcCRC32 &rArr; read_data_from_flash &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBCC_FromBytes
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_data_size
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_multiple_bytes
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>CRC16_Checkout</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gb17691a.o(i.CRC16_Checkout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16_Checkout
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_data_put_buf
</UL>

<P><STRONG><a name="[10c]"></a>CalcCRC32</STRONG> (Thumb, 240 bytes, Stack size 288 bytes, crc.o(i.CalcCRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CalcCRC32 &rArr; read_data_from_flash &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflect
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comupdate_check_crc32
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc32
</UL>

<P><STRONG><a name="[114]"></a>CanDataProcess</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, candataanalysis.o(i.CanDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CanDataProcess &rArr; CheckCanMsg &rArr; J1939ProtocolProcess &rArr; J1939MultiFrameProcess &rArr; ReleaseMultiFrameBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCanMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[116]"></a>CanInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, can.o(i.CanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CanInit &rArr; Can2ModeInit &rArr; CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2ModeInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1ModeInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIOConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[e4]"></a>CanSetBaud</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, can.o(i.CanSetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CanSetBaud &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObdCanBaudSet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxiliaryCanPinMatch
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxiliaryCanInit
</UL>

<P><STRONG><a name="[11b]"></a>CheckPenaltyZone</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gps_calculation.o(i.CheckPenaltyZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = CheckPenaltyZone &rArr; IsPenaltyZone &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_sim_3v8
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPenaltyZone
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsState
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_evads
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[120]"></a>Checkvin_SetUds</STRONG> (Thumb, 588 bytes, Stack size 184 bytes, gb17691a.o(i.Checkvin_SetUds))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Checkvin_SetUds &rArr; Set_evads &rArr; SetUdsPara &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsProtocol
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsPara
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_RESET
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_evads
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[126]"></a>CreatePlatformPublicKeyFile</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lkt4305_iic.o(i.CreatePlatformPublicKeyFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CreatePlatformPublicKeyFile &rArr; LKT4305SendData &rArr; iicSendByte &rArr; iicCheckAck &rArr; iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305SendData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Test
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>Dis15765_09Sever</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iso_15765.o(i.Dis15765_09Sever))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdPara
</UL>

<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wkup.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>EXTI_ClrITPendBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_exti.o(i.EXTI_ClrITPendBit))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>EXTI_InitPeripheral</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, n32g45x_exti.o(i.EXTI_InitPeripheral))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[ef]"></a>EvalBCC_FromBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gb17691a.o(i.EvalBCC_FromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvalBCC_FromBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_msg_from_flash
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_check
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_send
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout_send
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disman_alarm_send
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool_login_send_new
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_check
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
</UL>

<P><STRONG><a name="[12b]"></a>F101_Sensor_Send</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, j_1939.o(i.F101_Sensor_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = F101_Sensor_Send &rArr; SendCanMsg &rArr; CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanMsg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1SendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[12d]"></a>GB17691_CMD_analysis</STRONG> (Thumb, 716 bytes, Stack size 48 bytes, gb17691a.o(i.GB17691_CMD_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = GB17691_CMD_analysis &rArr; set_lognum &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsProtocol
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsPara
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sim_net
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_stamp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_preset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lognum
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lognum
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_evads
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_check
</UL>

<P><STRONG><a name="[135]"></a>GB17691_CMD_check</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, gb17691a.o(i.GB17691_CMD_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = GB17691_CMD_check &rArr; GB17691_CMD_analysis &rArr; set_lognum &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_rx_data_size
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_data_multiple_bytes
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBCC_FromBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[138]"></a>GB17691_data_put_buf</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, gb17691a.o(i.GB17691_data_put_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = GB17691_data_put_buf &rArr; get_AIKELAN_datapack &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketWrite
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Checkout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_send_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_register
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_crcre
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>

<P><STRONG><a name="[ee]"></a>GB17691_get_BOOLcustom_Info</STRONG> (Thumb, 220 bytes, Stack size 120 bytes, gb17691_can_gps.o(i.GB17691_get_BOOLcustom_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GB17691_get_BOOLcustom_Info &rArr; get_gps_info
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_info
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Engine_Infor_t
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Aftertreatment_Infor_t
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
</UL>

<P><STRONG><a name="[ed]"></a>GB17691_get_BOOLdatastream_Info</STRONG> (Thumb, 944 bytes, Stack size 176 bytes, gb17691_can_gps.o(i.GB17691_get_BOOLdatastream_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = GB17691_get_BOOLdatastream_Info &rArr; get_GB17691_gps_info &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Vehicle_Infor_t
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Engine_Infor_t
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Aftertreatment_Infor_t
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GB17691_gps_info
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
</UL>

<P><STRONG><a name="[ec]"></a>GB17691_get_OBD_Info</STRONG> (Thumb, 1204 bytes, Stack size 232 bytes, gb17691_can_gps.o(i.GB17691_get_OBD_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GB17691_get_OBD_Info &rArr; GB17691_get_VIN_Info &rArr; get_OBD_Vehicle_Infor_t
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_is_ASCII
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Vehicle_Infor_t
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Diagnosis_Infor_t
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_VIN_Info
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
</UL>

<P><STRONG><a name="[e8]"></a>GB17691_get_VIN_Info</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, gb17691_can_gps.o(i.GB17691_get_VIN_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GB17691_get_VIN_Info &rArr; get_OBD_Vehicle_Infor_t
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Vehicle_Infor_t
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_send
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout_send
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disman_alarm_send
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool_login_send_new
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_OBD_Info
</UL>

<P><STRONG><a name="[15e]"></a>GB17691_get_softver_Info</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gb17691_can_gps.o(i.GB17691_get_softver_Info))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task_init
</UL>

<P><STRONG><a name="[144]"></a>GB17691_real_time_upload</STRONG> (Thumb, 760 bytes, Stack size 24 bytes, gb17691a.o(i.GB17691_real_time_upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = GB17691_real_time_upload &rArr; GB17691_data_put_buf &rArr; get_AIKELAN_datapack &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sim_net
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnect_sim_net
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_set_time
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_stamp
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_send
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout_send
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool_login_send_new
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_data_put_buf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_big_heart_time
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_terminal_connect_status
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GB17691_gps_info
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_resend_data_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[14e]"></a>GB17691_resend_data</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, gb17691a.o(i.GB17691_resend_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GB17691_resend_data &rArr; write_resend_data_flag &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_msg_from_flash
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_stamp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketWrite
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_send_data
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_resend_data_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[a6]"></a>GB17691_task</STRONG> (Thumb, 414 bytes, Stack size 0 bytes, gb17691a.o(i.GB17691_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = GB17691_task &rArr; GB17691_real_time_upload &rArr; GB17691_data_put_buf &rArr; get_AIKELAN_datapack &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBkpData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_frame
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_stamp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_power_state
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPenaltyZone
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_set_time
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disman_alarm_send
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305_Key_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps_Led_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SM2id
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_resend_data
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_check
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkvin_SetUds
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_big_heart_time
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_big_heart
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GB17691_gps_info
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recordstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gb17691a.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>GB17691_task_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, gb17691a.o(i.GB17691_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GB17691_task_init &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBkpData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBkpData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_stamp
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_big_heart_time
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_softver_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, n32g45x_gpio.o(i.GPIO_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIOConfig
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctl_gpio_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_USART_Config
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_LED_INIT
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps_Led_Init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_gpio_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicInit
</UL>

<P><STRONG><a name="[24b]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_3v3_state
</UL>

<P><STRONG><a name="[e3]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIOConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxiliaryCanPinMatch
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxiliaryCanInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_sim_3v8
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_sim_pwr
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sim_pwrkey
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_3v3
</UL>

<P><STRONG><a name="[e5]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxiliaryCanPinMatch
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxiliaryCanInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_sim_3v8
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sim_pwrkey
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_3v3
</UL>

<P><STRONG><a name="[160]"></a>GetCanData</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, candataanalysis.o(i.GetCanData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCanData
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanDataFrameCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdData
</UL>

<P><STRONG><a name="[118]"></a>GetCanRxMsg</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, can.o(i.GetCanRxMsg))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCanMsg
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolMatch
</UL>

<P><STRONG><a name="[18f]"></a>GetCanSpecifyFrame</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, candataanalysis.o(i.GetCanSpecifyFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetCanSpecifyFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameToData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameToData
</UL>

<P><STRONG><a name="[11c]"></a>GetGpsState</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, gps_calculation.o(i.GetGpsState))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GetGpsState &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_info
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_str_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPenaltyZone
</UL>

<P><STRONG><a name="[16b]"></a>GetUdsPara</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, spi_flash.o(i.GetUdsPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetUdsPara &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdPara
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_evads
</UL>

<P><STRONG><a name="[157]"></a>Get_SM2id</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gb17691a.o(i.Get_SM2id))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Get_SM2id &rArr; set_idstate &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_imei
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_idstate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idstate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[176]"></a>Get_Sensor_flag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, j_1939.o(i.Get_Sensor_flag))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_guide
</UL>

<P><STRONG><a name="[153]"></a>Gps_Led_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gb17691a.o(i.Gps_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gps_Led_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>ISO15765CheckPid</STRONG> (Thumb, 2160 bytes, Stack size 312 bytes, iso_15765.o(i.ISO15765CheckPid))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ISO15765CheckPid &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsCmdDisSend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAscii
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SingleFrameToData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameToData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_15765_canAdd_Blacklist_judge
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765EnPidSend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765DisPidSend
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsISO15765PidDoneEn
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765VinProcess
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SoftCbrtNum
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765ObdFault
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765ObdDiagnosis
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765NoxProcess
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765IuprProcess
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765DisPidDone
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CvnProcess
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_15765_09_SID
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBkpData
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdData
</UL>

<P><STRONG><a name="[17c]"></a>ISO15765DisPidSend</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, iso_15765.o(i.ISO15765DisPidSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ISO15765DisPidSend
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[17b]"></a>ISO15765EnPidSend</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, iso_15765.o(i.ISO15765EnPidSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ISO15765EnPidSend
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[187]"></a>ISO15765Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, iso_15765.o(i.ISO15765Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ISO15765Init &rArr; ISO15765EnPidSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765EnPidSend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_15765_09_SID
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBkpData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obd_init
</UL>

<P><STRONG><a name="[178]"></a>ISO15765MultiFrameToData</STRONG> (Thumb, 224 bytes, Stack size 36 bytes, candataanalysis.o(i.ISO15765MultiFrameToData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ISO15765MultiFrameToData &rArr; GetCanSpecifyFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanSpecifyFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsCheckPid
</UL>

<P><STRONG><a name="[192]"></a>ISO15765SendMsg</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, iso_15765.o(i.ISO15765SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ISO15765SendMsg &rArr; SendCanMsg &rArr; CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanMsg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[179]"></a>ISO15765SingleFrameToData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, candataanalysis.o(i.ISO15765SingleFrameToData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ISO15765SingleFrameToData
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsCheckPid
</UL>

<P><STRONG><a name="[198]"></a>IWDG_CntReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_iwdg.o(i.IWDG_CntReload))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[199]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[193]"></a>IWDG_Feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg.o(i.IWDG_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadKey
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>IWDG_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iwdg.o(i.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescalerDiv
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadKey
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_CntReload
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>IWDG_ReloadKey</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_iwdg.o(i.IWDG_ReloadKey))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[197]"></a>IWDG_SetPrescalerDiv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_iwdg.o(i.IWDG_SetPrescalerDiv))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[196]"></a>IWDG_WriteConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_iwdg.o(i.IWDG_WriteConfig))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[17f]"></a>IsAscii</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, utils.o(i.IsAscii))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765VinProcess
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SoftCbrtNum
</UL>

<P><STRONG><a name="[11d]"></a>IsPenaltyZone</STRONG> (Thumb, 400 bytes, Stack size 136 bytes, gps_calculation.o(i.IsPenaltyZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = IsPenaltyZone &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_info
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_str_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPenaltyZone
</UL>

<P><STRONG><a name="[1d8]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(i.Is_Leap_Year))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[166]"></a>J1939CheckPgn</STRONG> (Thumb, 4090 bytes, Stack size 352 bytes, j_1939.o(i.J1939CheckPgn))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = J1939CheckPgn &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939SingleFrameToData
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameToData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canid_priority_judge
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939PgnDisSend
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939PgnDisDone
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939IuprProcess
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsJ1939PgnDoneEn
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsCmdDisSend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAscii
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765DisPidSend
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdData
</UL>

<P><STRONG><a name="[1c9]"></a>J1939Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, j_1939.o(i.J1939Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obd_init
</UL>

<P><STRONG><a name="[19b]"></a>J1939MultiFrameToData</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, candataanalysis.o(i.J1939MultiFrameToData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = J1939MultiFrameToData &rArr; GetCanSpecifyFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanSpecifyFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
</UL>

<P><STRONG><a name="[1a6]"></a>J1939SendMsg</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, j_1939.o(i.J1939SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = J1939SendMsg &rArr; SendCanMsg &rArr; CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanMsg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[19c]"></a>J1939SingleFrameToData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, candataanalysis.o(i.J1939SingleFrameToData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = J1939SingleFrameToData
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
</UL>

<P><STRONG><a name="[154]"></a>LKT4305Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lkt4305_iic.o(i.LKT4305Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LKT4305Init &rArr; iicInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicInit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305_Key_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[128]"></a>LKT4305RecData</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lkt4305_iic.o(i.LKT4305RecData))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LKT4305RecData &rArr; iicSendByte &rArr; iicCheckAck &rArr; iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicStop1
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicStart
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicSendByte
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicRecByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPublickey
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Test
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlatformPublicKey_32Bytes
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlatformPublicKey
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICPublicKey2File
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICPrivateKey2File
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePlatformPublicKeyFile
</UL>

<P><STRONG><a name="[127]"></a>LKT4305SendData</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lkt4305_iic.o(i.LKT4305SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LKT4305SendData &rArr; iicSendByte &rArr; iicCheckAck &rArr; iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicStop2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicStart
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPublickey
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Test
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlatformPublicKey_32Bytes
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlatformPublicKey
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICPublicKey2File
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICPrivateKey2File
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePlatformPublicKeyFile
</UL>

<P><STRONG><a name="[1ad]"></a>LKT4305Test</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, lkt4305_iic.o(i.LKT4305Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LKT4305Test &rArr; set_keystate &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_keystate
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICPublicKey2File
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICPrivateKey2File
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305SendData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePlatformPublicKeyFile
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305_Key_Init
</UL>

<P><STRONG><a name="[155]"></a>LKT4305_Key_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, gb17691a.o(i.LKT4305_Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LKT4305_Key_Init &rArr; LKT4305Test &rArr; set_keystate &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_keystate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPublickey
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Test
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[108]"></a>MCU_RESET</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, power_ctl.o(i.MCU_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkvin_SetUds
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_analysis
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1b3]"></a>My_RTC_Init</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, rtc.o(i.My_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = My_RTC_Init &rArr; RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableAlarm
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigInt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableRtcClk
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableLsi
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigRtcClk
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessEnable
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_InitPeripheral
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>NVIC_Config</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, bsp.o(i.NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_USART_Config
</UL>

<P><STRONG><a name="[1c5]"></a>NVIC_Config_can</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, obd.o(i.NVIC_Config_can))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Config_can &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[1c2]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config_can
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_init
</UL>

<P><STRONG><a name="[1c4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config_can
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[1c6]"></a>OBD_LED_INIT</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, obd.o(i.OBD_LED_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OBD_LED_INIT &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[1c8]"></a>Obd_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, obd.o(i.Obd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Obd_init &rArr; GetObdPara &rArr; GetUdsPara &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdPara
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[1ca]"></a>OpenSocket</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, multisocket.o(i.OpenSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = OpenSocket &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[1b4]"></a>PWR_BackupAccessEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_pwr.o(i.PWR_BackupAccessEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[1f4]"></a>PWR_EnterStandbyState</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, n32g45x_pwr.o(i.PWR_EnterStandbyState))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
</UL>

<P><STRONG><a name="[1b7]"></a>RCC_ConfigRtcClk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_ConfigRtcClk))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[d9]"></a>RCC_EnableAHBPeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableAHBPeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[ff]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableAPB1PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIOConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
</UL>

<P><STRONG><a name="[fd]"></a>RCC_EnableAPB1PeriphReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableAPB1PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[d8]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableAPB2PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIOConfig
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctl_gpio_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_USART_Config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_LED_INIT
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps_Led_Init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_gpio_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicInit
</UL>

<P><STRONG><a name="[1f2]"></a>RCC_EnableAPB2PeriphReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableAPB2PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Enter_Standby
</UL>

<P><STRONG><a name="[1b5]"></a>RCC_EnableLsi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableLsi))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[1b8]"></a>RCC_EnableRtcClk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableRtcClk))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[208]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 240 bytes, Stack size 20 bytes, n32g45x_rcc.o(i.RCC_GetClocksFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1b6]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g45x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[1cd]"></a>RS232_USART_Config</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bsp.o(i.RS232_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = RS232_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.RTCAlarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTCAlarm_IRQHandler &rArr; RTC_EnableAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableAlarm
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClrIntPendingBit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1d2]"></a>RTC_ClrIntPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32g45x_rtc.o(i.RTC_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[1bf]"></a>RTC_ConfigInt</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, n32g45x_rtc.o(i.RTC_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[1bc]"></a>RTC_ConfigTime</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, n32g45x_rtc.o(i.RTC_ConfigTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_ConfigTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[1bd]"></a>RTC_EnableAlarm</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, n32g45x_rtc.o(i.RTC_EnableAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnableAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_s
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[1d5]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, n32g45x_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
</UL>

<P><STRONG><a name="[1d6]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
</UL>

<P><STRONG><a name="[1d7]"></a>RTC_Get</STRONG> (Thumb, 226 bytes, Stack size 12 bytes, rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[1d9]"></a>RTC_GetAlarm</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, n32g45x_rtc.o(i.RTC_GetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_GetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_rtcalarm
</UL>

<P><STRONG><a name="[1d1]"></a>RTC_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, n32g45x_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>RTC_GetTime</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, n32g45x_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_rtcalarm
</UL>

<P><STRONG><a name="[1ba]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, n32g45x_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[1db]"></a>RTC_Set</STRONG> (Thumb, 176 bytes, Stack size 36 bytes, rtc.o(i.RTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_Set &rArr; RTC_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time
</UL>

<P><STRONG><a name="[1be]"></a>RTC_SetAlarm</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, n32g45x_rtc.o(i.RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_rtcalarm
</UL>

<P><STRONG><a name="[1bb]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, n32g45x_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[1b9]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, n32g45x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
</UL>

<P><STRONG><a name="[1b2]"></a>ReadPublickey</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lkt4305_iic.o(i.ReadPublickey))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ReadPublickey &rArr; LKT4305SendData &rArr; iicSendByte &rArr; iicCheckAck &rArr; iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305SendData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305_Key_Init
</UL>

<P><STRONG><a name="[169]"></a>ReleaseCanDataBuf</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, candataanalysis.o(i.ReleaseCanDataBuf))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameProcess
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdData
</UL>

<P><STRONG><a name="[18c]"></a>ReleaseCanRxBuf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can.o(i.ReleaseCanRxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseMultiFrameBuf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939ProtocolProcess
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameProcess
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765ProtocolProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameProcess
</UL>

<P><STRONG><a name="[122]"></a>ResetData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gb17691a.o(i.ResetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ResetData &rArr; W25QXX_Erase_Chip_osMutex &rArr; W25QXX_Erase_Chip &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip_osMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkvin_SetUds
</UL>

<P><STRONG><a name="[1e0]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi_flash.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TransmitData
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
</UL>

<P><STRONG><a name="[1df]"></a>SPI_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[1e1]"></a>SPI_I2S_GetStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_I2S_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[1e3]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[1e2]"></a>SPI_I2S_TransmitData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_I2S_TransmitData))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[1de]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g45x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[12c]"></a>SendCanMsg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, candataanalysis.o(i.SendCanMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendCanMsg &rArr; CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2SendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TianDiCheRen_Sensor_Send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939SendMsg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F101_Sensor_Send
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SendMsg
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolMatch
</UL>

<P><STRONG><a name="[18b]"></a>SetCanRxBufDoneFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can.o(i.SetCanRxBufDoneFlag))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939ProtocolProcess
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameProcess
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765ProtocolProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameProcess
</UL>

<P><STRONG><a name="[1e5]"></a>SetCipget</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, multisocket.o(i.SetCipget))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SetCipget &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[16c]"></a>SetUdsEnFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uds.o(i.SetUdsEnFlag))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdPara
</UL>

<P><STRONG><a name="[16d]"></a>SetUdsMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uds.o(i.SetUdsMode))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdPara
</UL>

<P><STRONG><a name="[124]"></a>SetUdsPara</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, spi_flash.o(i.SetUdsPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SetUdsPara &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkvin_SetUds
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_evads
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>SetUdsProtocol</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uds.o(i.SetUdsProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetUdsProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToNextStep
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdPara
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkvin_SetUds
</UL>

<P><STRONG><a name="[1e9]"></a>Set_SimcomModleVer</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, sim_net.o(i.Set_SimcomModleVer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Set_SimcomModleVer &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[11e]"></a>Set_evads</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, spi_flash.o(i.Set_evads))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Set_evads &rArr; SetUdsPara &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsPara
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsPara
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPenaltyZone
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkvin_SetUds
</UL>

<P><STRONG><a name="[1eb]"></a>Set_rtcalarm</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, rtc.o(i.Set_rtcalarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Set_rtcalarm &rArr; RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_s
</UL>

<P><STRONG><a name="[1ec]"></a>SocketRead</STRONG> (Thumb, 114 bytes, Stack size 120 bytes, multisocket.o(i.SocketRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SocketRead &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[f0]"></a>SocketWrite</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, multisocket.o(i.SocketWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SocketWrite &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_send
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout_send
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disman_alarm_send
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool_login_send_new
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_resend_data
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_data_put_buf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
</UL>

<P><STRONG><a name="[63]"></a>SystemInit</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, system_n32g45x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1f7]"></a>TIM3_Int_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, timer.o(i.TIM3_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_Int_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f6]"></a>TIM_ClrIntPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1f9]"></a>TIM_ConfigInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[1fa]"></a>TIM_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[1f8]"></a>TIM_InitTimeBase</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_InitTimeBase))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[1fb]"></a>TerminalTestProcess</STRONG> (Thumb, 1368 bytes, Stack size 56 bytes, terminaltest.o(i.TerminalTestProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TerminalTestProcess &rArr; read_msg_from_flash &rArr; read_data_from_flash &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_s
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_msg_from_flash
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_fw_ver
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lkt4305_state
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_keystate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_imei
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_iccid
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_time
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2SendMsg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1SendMsg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBkpData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBkpData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_USART_Config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[201]"></a>TianDiCheRen_Sensor_Send</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, j_1939.o(i.TianDiCheRen_Sensor_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TianDiCheRen_Sensor_Send &rArr; SendCanMsg &rArr; CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanMsg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1SendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gps.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART4_IRQHandler &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sim_uart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART5_IRQHandler &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 648 bytes, Stack size 48 bytes, uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = USART1_IRQHandler &rArr; firmware_flash_init &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsPara
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_sim_3v8
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_flash_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>USARTSendOut</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, uart.o(i.USARTSendOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USARTSendOut
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_check
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_send_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_analysis
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
</UL>

<P><STRONG><a name="[1cf]"></a>USART_ConfigInt</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, n32g45x_usart.o(i.USART_ConfigInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_USART_Config
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_tx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_rx_data_size
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_data_size
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_rx_buf_wr_pos
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[1d0]"></a>USART_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_USART_Config
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_init
</UL>

<P><STRONG><a name="[207]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
</UL>

<P><STRONG><a name="[202]"></a>USART_GetIntStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, n32g45x_usart.o(i.USART_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_tx
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>USART_Init</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, n32g45x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_USART_Config
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_init
</UL>

<P><STRONG><a name="[203]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[205]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_tx
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[1f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, can.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; CAN1test
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReceiveMessage
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PendingMessage
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEmptyBuf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1test
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTermianlState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>UdsCheckPid</STRONG> (Thumb, 536 bytes, Stack size 280 bytes, uds.o(i.UdsCheckPid))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = UdsCheckPid &rArr; ISO15765MultiFrameToData &rArr; GetCanSpecifyFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SingleFrameToData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameToData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdData
</UL>

<P><STRONG><a name="[185]"></a>UdsCmdDisSend</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uds.o(i.UdsCmdDisSend))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765NoxProcess
</UL>

<P><STRONG><a name="[16e]"></a>UdsMatchTypeNum</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uds.o(i.UdsMatchTypeNum))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdPara
</UL>

<P><STRONG><a name="[20c]"></a>UdsReqServer</STRONG> (Thumb, 1648 bytes, Stack size 40 bytes, uds.o(i.UdsReqServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UdsReqServer &rArr; UdsSendReqCmd &rArr; CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2SendMsg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsSpeedCompare
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsSendReqCmd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsSendHeartWithoutResponse
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsCanIdDoneFlagMark
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMatchNextPro
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToNextStep
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[212]"></a>W25QXX_Erase_Chip</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_flash.o(i.W25QXX_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Erase_Chip &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip_osMutex
</UL>

<P><STRONG><a name="[1dc]"></a>W25QXX_Erase_Chip_osMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_flash.o(i.W25QXX_Erase_Chip_osMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25QXX_Erase_Chip_osMutex &rArr; W25QXX_Erase_Chip &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetData
</UL>

<P><STRONG><a name="[1e6]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spi_flash.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsPara
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lognum
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_keystate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_idstate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_firmware_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_flash_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_firmware_info
</UL>

<P><STRONG><a name="[215]"></a>W25QXX_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spi_flash.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W25QXX_Init &rArr; SPI1_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>W25QXX_Read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, spi_flash.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_keystate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsPara
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsPara
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_resend_data_flag
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lognum
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_keystate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_idstate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_firmware_info
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_flash
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recordstate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lognum
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idstate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_flash_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_firmware_info
</UL>

<P><STRONG><a name="[217]"></a>W25QXX_ReadSR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spi_flash.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[214]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_flash.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
</UL>

<P><STRONG><a name="[213]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi_flash.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25QXX_Write_Enable &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
</UL>

<P><STRONG><a name="[1e7]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, spi_flash.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsPara
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lognum
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_keystate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_idstate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_firmware_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_flash_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_firmware_info
</UL>

<P><STRONG><a name="[218]"></a>W25QXX_Write_Page</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, spi_flash.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_resend_data_flag
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[1ae]"></a>WriteICPrivateKey2File</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lkt4305_iic.o(i.WriteICPrivateKey2File))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = WriteICPrivateKey2File &rArr; WritePlatformPublicKey_32Bytes &rArr; LKT4305SendData &rArr; iicSendByte &rArr; iicCheckAck &rArr; iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlatformPublicKey_32Bytes
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305SendData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Test
</UL>

<P><STRONG><a name="[1af]"></a>WriteICPublicKey2File</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lkt4305_iic.o(i.WriteICPublicKey2File))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = WriteICPublicKey2File &rArr; WritePlatformPublicKey &rArr; LKT4305SendData &rArr; iicSendByte &rArr; iicCheckAck &rArr; iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlatformPublicKey
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305SendData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Test
</UL>

<P><STRONG><a name="[21a]"></a>WritePlatformPublicKey</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lkt4305_iic.o(i.WritePlatformPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = WritePlatformPublicKey &rArr; LKT4305SendData &rArr; iicSendByte &rArr; iicCheckAck &rArr; iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305SendData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICPublicKey2File
</UL>

<P><STRONG><a name="[219]"></a>WritePlatformPublicKey_32Bytes</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lkt4305_iic.o(i.WritePlatformPublicKey_32Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = WritePlatformPublicKey_32Bytes &rArr; LKT4305SendData &rArr; iicSendByte &rArr; iicCheckAck &rArr; iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305SendData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICPrivateKey2File
</UL>

<P><STRONG><a name="[21b]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c5]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1ed]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketRead
</UL>

<P><STRONG><a name="[2c6]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[2c7]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[21d]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c8]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[231]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftrantx
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpget
</UL>

<P><STRONG><a name="[2c9]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2ca]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[21e]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2cb]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[2cc]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[2cd]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[2ad]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf_AIKELAN
</UL>

<P><STRONG><a name="[22a]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a2]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
</UL>

<P><STRONG><a name="[1a1]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
</UL>

<P><STRONG><a name="[227]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[221]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[21f]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[225]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[222]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[226]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2ce]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2cf]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2d0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[220]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[28d]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[c4]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1cb]"></a>at_cmd_process</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sim_net.o(i.at_cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_tx
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scanf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_rx_buf_wr_pos
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipget
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSocket
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httppreadfile
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httppara0
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httppara
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httpinit
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httpaction
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsls
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsdel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fscd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cgpaddr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cgatt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftrantx
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpsstop
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpsstart
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpssingleip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpslogout
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpscacherd_To_UART
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpscacherd
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpgetfile
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpget
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cfslogin
</UL>

<P><STRONG><a name="[14c]"></a>bool_login_send_new</STRONG> (Thumb, 224 bytes, Stack size 144 bytes, gb17691a.o(i.bool_login_send_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = bool_login_send_new &rArr; get_lognum &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_imei
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_iccid
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketWrite
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBCC_FromBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_send_data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_VIN_Info
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lognum
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>

<P><STRONG><a name="[246]"></a>can_collection</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, obd.o(i.can_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = can_collection &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>check_flash</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, gb17691a.o(i.check_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = check_flash &rArr; read_msg_from_flash &rArr; read_data_from_flash &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_msg_from_flash
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[249]"></a>clear_firmware_info</STRONG> (Thumb, 60 bytes, Stack size 264 bytes, spi_flash.o(i.clear_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = clear_firmware_info &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_download_complete
</UL>

<P><STRONG><a name="[28c]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[293]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[28a]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[258]"></a>delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lkt4305_iic.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicStop2
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicStop1
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicStart
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicSendByte
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicRecByte
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicNoAck
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicCheckAck
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicAck
</UL>

<P><STRONG><a name="[15b]"></a>disman_alarm_send</STRONG> (Thumb, 242 bytes, Stack size 88 bytes, gb17691a.o(i.disman_alarm_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = disman_alarm_send &rArr; get_GB17691_gps_info &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_stamp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketWrite
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBCC_FromBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_send_data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GB17691_gps_info
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_VIN_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[224]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[106]"></a>firmware_flash_init</STRONG> (Thumb, 84 bytes, Stack size 264 bytes, spi_flash.o(i.firmware_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = firmware_flash_init &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_analysis
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[209]"></a>getTermianlState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, terminaltest.o(i.getTermianlState))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_send
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[24a]"></a>get_3v3_state</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, power_ctl.o(i.get_3v3_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_3v3_state
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
</UL>

<P><STRONG><a name="[13b]"></a>get_AIKELAN_crcre</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gb17691_can_gps.o(i.get_AIKELAN_crcre))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_AIKELAN_crcre &rArr; uprintf_AIKELAN &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf_AIKELAN
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_data_put_buf
</UL>

<P><STRONG><a name="[13c]"></a>get_AIKELAN_datapack</STRONG> (Thumb, 4622 bytes, Stack size 408 bytes, gb17691_can_gps.o(i.get_AIKELAN_datapack))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = get_AIKELAN_datapack &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_info
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Vehicle_Infor_t
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Engine_Infor_t
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Diagnosis_Infor_t
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OBD_Aftertreatment_Infor_t
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_str_to_float
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf_AIKELAN
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_data_put_buf
</UL>

<P><STRONG><a name="[139]"></a>get_AIKELAN_register</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gb17691_can_gps.o(i.get_AIKELAN_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_AIKELAN_register &rArr; uprintf_AIKELAN &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uprintf_AIKELAN
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_data_put_buf
</UL>

<P><STRONG><a name="[141]"></a>get_GB17691_gps_info</STRONG> (Thumb, 346 bytes, Stack size 96 bytes, gps_calculation.o(i.get_GB17691_gps_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_GB17691_gps_info &rArr; gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_info
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_str_to_float
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disman_alarm_send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_BOOLdatastream_Info
</UL>

<P><STRONG><a name="[13e]"></a>get_OBD_Aftertreatment_Infor_t</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, obd.o(i.get_OBD_Aftertreatment_Infor_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_OBD_Aftertreatment_Infor_t
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_BOOLdatastream_Info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_BOOLcustom_Info
</UL>

<P><STRONG><a name="[142]"></a>get_OBD_Diagnosis_Infor_t</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, obd.o(i.get_OBD_Diagnosis_Infor_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_OBD_Diagnosis_Infor_t
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_OBD_Info
</UL>

<P><STRONG><a name="[13d]"></a>get_OBD_Engine_Infor_t</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, obd.o(i.get_OBD_Engine_Infor_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_OBD_Engine_Infor_t
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_BOOLdatastream_Info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_BOOLcustom_Info
</UL>

<P><STRONG><a name="[140]"></a>get_OBD_Vehicle_Infor_t</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, obd.o(i.get_OBD_Vehicle_Infor_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_OBD_Vehicle_Infor_t
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_VIN_Info
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_OBD_Info
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_BOOLdatastream_Info
</UL>

<P><STRONG><a name="[25f]"></a>get_big_heart_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gb17691a.o(i.get_big_heart_flag))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
</UL>

<P><STRONG><a name="[26c]"></a>get_comupdate_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.get_comupdate_mode))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>get_current_time</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtc.o(i.get_current_time))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_send
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout_send
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disman_alarm_send
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool_login_send_new
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
</UL>

<P><STRONG><a name="[10b]"></a>get_data_multiple_bytes</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.get_data_multiple_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_data_multiple_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_check
</UL>

<P><STRONG><a name="[250]"></a>get_firmware_info</STRONG> (Thumb, 122 bytes, Stack size 272 bytes, spi_flash.o(i.get_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_firmware_info &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_download_complete
</UL>

<P><STRONG><a name="[13f]"></a>get_gps_info</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gps.o(i.get_gps_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_gps_info
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPenaltyZone
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsState
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GB17691_gps_info
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_BOOLcustom_Info
</UL>

<P><STRONG><a name="[1fe]"></a>get_gps_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gps.o(i.get_gps_time))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_set_time
</UL>

<P><STRONG><a name="[1fd]"></a>get_iccid</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sim_net.o(i.get_iccid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_iccid &rArr; judge_is_ASCII
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_is_ASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool_login_send_new
</UL>

<P><STRONG><a name="[173]"></a>get_idstate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi_flash.o(i.get_idstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_idstate &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SM2id
</UL>

<P><STRONG><a name="[eb]"></a>get_imei</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sim_net.o(i.get_imei))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1test
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_send
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout_send
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool_login_send_new
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SM2id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
</UL>

<P><STRONG><a name="[1b1]"></a>get_keystate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spi_flash.o(i.get_keystate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_keystate &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305_Key_Init
</UL>

<P><STRONG><a name="[1ff]"></a>get_lkt4305_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gb17691a.o(i.get_lkt4305_state))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
</UL>

<P><STRONG><a name="[260]"></a>get_login_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gb17691a.o(i.get_login_state))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[133]"></a>get_lognum</STRONG> (Thumb, 280 bytes, Stack size 296 bytes, spi_flash.o(i.get_lognum))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = get_lognum &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool_login_send_new
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
</UL>

<P><STRONG><a name="[251]"></a>get_net_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sim_net.o(i.get_net_status))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_terminal_connect_status
</UL>

<P><STRONG><a name="[152]"></a>get_power_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, power_ctl.o(i.get_power_state))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[156]"></a>get_recordstate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spi_flash.o(i.get_recordstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_recordstate &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[10a]"></a>get_rx_data_size</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uart.o(i.get_rx_data_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_check
</UL>

<P><STRONG><a name="[137]"></a>get_sim_data_multiple_bytes</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sim_uart.o(i.get_sim_data_multiple_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sim_data_multiple_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_check
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
</UL>

<P><STRONG><a name="[1fc]"></a>get_sim_fw_ver</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sim_net.o(i.get_sim_fw_ver))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
</UL>

<P><STRONG><a name="[23c]"></a>get_sim_rx_buf_wr_pos</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sim_uart.o(i.get_sim_rx_buf_wr_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_sim_rx_buf_wr_pos &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>

<P><STRONG><a name="[2a1]"></a>get_sim_rx_byte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sim_uart.o(i.get_sim_rx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scanf
</UL>

<P><STRONG><a name="[136]"></a>get_sim_rx_data_size</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sim_uart.o(i.get_sim_rx_data_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_check
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scanf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
</UL>

<P><STRONG><a name="[ea]"></a>get_time_stamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.get_time_stamp))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_send
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disman_alarm_send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_resend_data
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_big_heart
</UL>

<P><STRONG><a name="[14b]"></a>get_vin</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, spi_flash.o(i.get_vin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_vin &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>

<P><STRONG><a name="[158]"></a>gps_process_frame</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, gps.o(i.gps_process_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = gps_process_frame &rArr; gps_process_gprmc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_gprmc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_gngga
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_size
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2int
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[159]"></a>gps_set_time</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gb17691a.o(i.gps_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gps_set_time &rArr; set_current_time &rArr; RTC_Set &rArr; RTC_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_time
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBkpData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBkpData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[162]"></a>gps_str_to_float</STRONG> (Thumb, 318 bytes, Stack size 88 bytes, gps_calculation.o(i.gps_str_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gps_str_to_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPenaltyZone
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsState
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_GB17691_gps_info
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
</UL>

<P><STRONG><a name="[256]"></a>gps_uart_init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, gps.o(i.gps_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = gps_uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>is_set_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.is_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_set_time
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>

<P><STRONG><a name="[25c]"></a>is_sleep</STRONG> (Thumb, 444 bytes, Stack size 128 bytes, power_ctl.o(i.is_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = is_sleep &rArr; get_vin &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_s
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_sim_3v8
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_status
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_login_state
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_big_heart_flag
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDat
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_3v3
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_3v3
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_3v3_state
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>iso_15765_canAdd_Blacklist_judge</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, iso_15765.o(i.iso_15765_canAdd_Blacklist_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iso_15765_canAdd_Blacklist_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolMatch
</UL>

<P><STRONG><a name="[263]"></a>isrMessageGet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[265]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[264]"></a>isr_mbx_receive</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[267]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[143]"></a>judge_is_ASCII</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, obd.o(i.judge_is_ASCII))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = judge_is_ASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_iccid
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_OBD_Info
</UL>

<P><STRONG><a name="[14d]"></a>logout_send</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, gb17691a.o(i.logout_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = logout_send &rArr; SocketWrite &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_imei
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketWrite
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBCC_FromBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_send_data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_VIN_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>

<P><STRONG><a name="[a9]"></a>main</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = main &rArr; COM_CMD_check &rArr; COM_CMD_analysis &rArr; comupdate_check_crc32 &rArr; CalcCRC32 &rArr; read_data_from_flash &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_task_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctl_gpio_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_comupdate_mode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTermianlState
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_collection
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_USART_Config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_check
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>obd_task</STRONG> (Thumb, 634 bytes, Stack size 0 bytes, obd.o(i.obd_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = obd_task &rArr; GetObdData &rArr; J1939CheckPgn &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TianDiCheRen_Sensor_Send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939SendMsg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F101_Sensor_Send
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SendMsg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsReqServer
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsPara
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsPara
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDataProcess
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obd_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_LED_INIT
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config_can
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolMatch
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_guide
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObdData
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEPM
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxiliaryCanPinMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obd.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPublickey
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Test
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305_Key_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SM2id
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_analysis
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_task
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scanf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlatformPublicKey_32Bytes
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlatformPublicKey
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICPublicKey2File
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICPrivateKey2File
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePlatformPublicKeyFile
</UL>

<P><STRONG><a name="[ad]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[af]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[26e]"></a>osMessageGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[216]"></a>osMutexCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>osMutexRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_keystate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsPara
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsPara
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_resend_data_flag
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lognum
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_keystate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_idstate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_firmware_info
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_flash
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recordstate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lognum
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idstate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_flash_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_firmware_info
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip_osMutex
</UL>

<P><STRONG><a name="[170]"></a>osMutexWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexWait))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_keystate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsPara
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsPara
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_resend_data_flag
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lognum
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_keystate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_idstate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_firmware_info
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_flash
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recordstate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lognum
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idstate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_flash_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_firmware_info
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip_osMutex
</UL>

<P><STRONG><a name="[ae]"></a>osThreadCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_task_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_collection
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[77]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[26f]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[a8]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[282]"></a>os_error</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[76]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[290]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[b4]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[26a]"></a>power_ctl_gpio_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, power_ctl.o(i.power_ctl_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = power_ctl_gpio_init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_sim_3v8
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_3v3
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>read_data_from_flash</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, spi_flash.o(i.read_data_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_data_from_flash &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_msg_from_flash
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comupdate_check_crc32
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc32
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC32
</UL>

<P><STRONG><a name="[14f]"></a>read_msg_from_flash</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, gb17691a.o(i.read_msg_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = read_msg_from_flash &rArr; read_data_from_flash &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBCC_FromBytes
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_resend_data
</UL>

<P><STRONG><a name="[149]"></a>reconnect_sim_net</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sim_net.o(i.reconnect_sim_net))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>

<P><STRONG><a name="[130]"></a>reset_sim_net</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sim_net.o(i.reset_sim_net))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[270]"></a>reset_sim_pwrkey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sim_pwrkey.o(i.reset_sim_pwrkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_sim_pwrkey
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_power_on
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_power_off
</UL>

<P><STRONG><a name="[61]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm4.o(.emb_text)
</UL>
<P><STRONG><a name="[2a8]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[271]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[275]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[277]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[278]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[27a]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[27b]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_evt_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[62]"></a>rt_free_box</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm4.o(.emb_text)
</UL>
<P><STRONG><a name="[2a9]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[273]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2a3]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[28e]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[27f]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[266]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[2a5]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[280]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[283]"></a>rt_mbx_wait</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[2a6]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[284]"></a>rt_mut_release</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>

<P><STRONG><a name="[285]"></a>rt_mut_wait</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>

<P><STRONG><a name="[b1]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[269]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[268]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[272]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[276]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>

<P><STRONG><a name="[279]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[286]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>

<P><STRONG><a name="[281]"></a>rt_ret_val</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[27d]"></a>rt_ret_val2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[27c]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[288]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[287]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[b0]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[274]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[28b]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[28f]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[b2]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[292]"></a>rt_tsk_create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[294]"></a>rt_tsk_delete</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[296]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[2aa]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[132]"></a>set_current_time</STRONG> (Thumb, 58 bytes, Stack size 28 bytes, rtc.o(i.set_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = set_current_time &rArr; RTC_Set &rArr; RTC_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_set_time
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
</UL>

<P><STRONG><a name="[107]"></a>set_firmware_info</STRONG> (Thumb, 236 bytes, Stack size 280 bytes, spi_flash.o(i.set_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = set_firmware_info &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_analysis
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[174]"></a>set_idstate</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, spi_flash.o(i.set_idstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_idstate &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SM2id
</UL>

<P><STRONG><a name="[1b0]"></a>set_keystate</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, spi_flash.o(i.set_keystate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_keystate &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Test
</UL>

<P><STRONG><a name="[134]"></a>set_lognum</STRONG> (Thumb, 228 bytes, Stack size 296 bytes, spi_flash.o(i.set_lognum))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = set_lognum &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
</UL>

<P><STRONG><a name="[297]"></a>set_sim_pwrkey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sim_pwrkey.o(i.set_sim_pwrkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_sim_pwrkey
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_power_on
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_power_off
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_gpio_init
</UL>

<P><STRONG><a name="[125]"></a>set_vin</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, spi_flash.o(i.set_vin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_vin &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkvin_SetUds
</UL>

<P><STRONG><a name="[299]"></a>sim_gpio_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sim_pwrkey.o(i.sim_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sim_gpio_init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_sim_pwr
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sim_pwrkey
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_task
</UL>

<P><STRONG><a name="[29b]"></a>sim_net_ctr</STRONG> (Thumb, 960 bytes, Stack size 48 bytes, sim_net.o(i.sim_net_ctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = sim_net_ctr &rArr; update_firmware &rArr; is_update_firmware1 &rArr; at_cftrantx &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTermianlState
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_sim_3v8
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sim_net
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_power_state
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_RESET
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_login_state
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipget
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSocket
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SimcomModleVer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_power_on
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_power_off
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_task
</UL>

<P><STRONG><a name="[a7]"></a>sim_net_task</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sim_net.o(i.sim_net_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = sim_net_task &rArr; sim_net_ctr &rArr; update_firmware &rArr; is_update_firmware1 &rArr; at_cftrantx &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_gpio_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim_net.o(.constdata)
</UL>
<P><STRONG><a name="[26b]"></a>sim_net_task_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sim_net.o(i.sim_net_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sim_net_task_init &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29f]"></a>sim_uart_init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sim_uart.o(i.sim_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sim_uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_task
</UL>

<P><STRONG><a name="[150]"></a>sim_uart_tx</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, sim_uart.o(i.sim_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sim_uart_tx &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_send_data
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>

<P><STRONG><a name="[200]"></a>sleep_s</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sleep.o(i.sleep_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sleep_s &rArr; Set_rtcalarm &rArr; RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Enter_Standby
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableAlarm
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_rtcalarm
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTestProcess
</UL>

<P><STRONG><a name="[223]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[6b]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[6c]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[6d]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[2a4]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[6e]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[6f]"></a>svcMutexCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexCreate)
</UL>
<P><STRONG><a name="[70]"></a>svcMutexRelease</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[71]"></a>svcMutexWait</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexWait)
</UL>
<P><STRONG><a name="[72]"></a>svcThreadCreate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[73]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[74]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[75]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[291]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[14a]"></a>timing_send</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, gb17691a.o(i.timing_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = timing_send &rArr; SocketWrite &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_imei
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTermianlState
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_stamp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketWrite
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvalBCC_FromBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_send_data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_get_VIN_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>

<P><STRONG><a name="[261]"></a>turn_off_3v3</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, power_ctl.o(i.turn_off_3v3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = turn_off_3v3
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctl_gpio_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
</UL>

<P><STRONG><a name="[11f]"></a>turn_off_sim_3v8</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, power_ctl.o(i.turn_off_sim_3v8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = turn_off_sim_3v8
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctl_gpio_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPenaltyZone
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_power_on
</UL>

<P><STRONG><a name="[29a]"></a>turn_off_sim_pwr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sim_pwrkey.o(i.turn_off_sim_pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = turn_off_sim_pwr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_gpio_init
</UL>

<P><STRONG><a name="[25e]"></a>turn_on_3v3</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, power_ctl.o(i.turn_on_3v3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = turn_on_3v3
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sleep
</UL>

<P><STRONG><a name="[2a0]"></a>turn_on_sim_3v8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, power_ctl.o(i.turn_on_sim_3v8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = turn_on_sim_3v8
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_power_on
</UL>

<P><STRONG><a name="[103]"></a>uprintf</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, uart.o(i.uprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uprintf &rArr; USARTSendOut
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checkvin_SetUds
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_analysis
</UL>

<P><STRONG><a name="[24c]"></a>uprintf_AIKELAN</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, gb17691_can_gps.o(i.uprintf_AIKELAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uprintf_AIKELAN &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_register
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_datapack
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AIKELAN_crcre
</UL>

<P><STRONG><a name="[f2]"></a>write_data_to_flash</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, spi_flash.o(i.write_data_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write_data_to_flash &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_data_put_buf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_analysis
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
</UL>

<P><STRONG><a name="[146]"></a>write_resend_data_flag</STRONG> (Thumb, 170 bytes, Stack size 280 bytes, spi_flash.o(i.write_resend_data_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = write_resend_data_flag &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_resend_data
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[fe]"></a>CAN_GPIOConfig</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, can.o(i.CAN_GPIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_GPIOConfig &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[10f]"></a>Can1ModeInit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, can.o(i.Can1ModeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Can1ModeInit &rArr; CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_INTConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_InitFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[112]"></a>Can2ModeInit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, can.o(i.Can2ModeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Can2ModeInit &rArr; CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_INTConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_InitFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[fb]"></a>getEmptyBuf</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, can.o(i.getEmptyBuf))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>Dis_15765_09_SID</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iso_15765.o(i.Dis_15765_09_SID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dis_15765_09_SID
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[182]"></a>ISO15765CvnProcess</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, iso_15765.o(i.ISO15765CvnProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ISO15765CvnProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[17d]"></a>ISO15765DisPidDone</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, iso_15765.o(i.ISO15765DisPidDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ISO15765DisPidDone
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[183]"></a>ISO15765IuprProcess</STRONG> (Thumb, 516 bytes, Stack size 8 bytes, iso_15765.o(i.ISO15765IuprProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISO15765IuprProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[186]"></a>ISO15765NoxProcess</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, iso_15765.o(i.ISO15765NoxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ISO15765NoxProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsCmdDisSend
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[17e]"></a>ISO15765ObdDiagnosis</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, iso_15765.o(i.ISO15765ObdDiagnosis))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[184]"></a>ISO15765ObdFault</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, iso_15765.o(i.ISO15765ObdFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISO15765ObdFault
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[181]"></a>ISO15765SoftCbrtNum</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, iso_15765.o(i.ISO15765SoftCbrtNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ISO15765SoftCbrtNum
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAscii
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[180]"></a>ISO15765VinProcess</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, iso_15765.o(i.ISO15765VinProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ISO15765VinProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAscii
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[17a]"></a>IsISO15765PidDoneEn</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, iso_15765.o(i.IsISO15765PidDoneEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsISO15765PidDoneEn
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
</UL>

<P><STRONG><a name="[19a]"></a>IsJ1939PgnDoneEn</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, j_1939.o(i.IsJ1939PgnDoneEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsJ1939PgnDoneEn
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
</UL>

<P><STRONG><a name="[1a4]"></a>IuprProcess</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, j_1939.o(i.IuprProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IuprProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939IuprProcess
</UL>

<P><STRONG><a name="[19f]"></a>J1939IuprProcess</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, j_1939.o(i.J1939IuprProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = J1939IuprProcess &rArr; IuprProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IuprProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
</UL>

<P><STRONG><a name="[1a3]"></a>J1939PgnDisDone</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, j_1939.o(i.J1939PgnDisDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = J1939PgnDisDone
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
</UL>

<P><STRONG><a name="[19e]"></a>J1939PgnDisSend</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, j_1939.o(i.J1939PgnDisSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = J1939PgnDisSend
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
</UL>

<P><STRONG><a name="[19d]"></a>canid_priority_judge</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, j_1939.o(i.canid_priority_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = canid_priority_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
</UL>

<P><STRONG><a name="[e2]"></a>AuxiliaryCanInit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, obd.o(i.AuxiliaryCanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AuxiliaryCanInit &rArr; CanSetBaud &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSetBaud
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxiliaryCanPinMatch
</UL>

<P><STRONG><a name="[e6]"></a>AuxiliaryCanPinMatch</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, obd.o(i.AuxiliaryCanPinMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AuxiliaryCanPinMatch &rArr; AuxiliaryCanInit &rArr; CanSetBaud &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSetBaud
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxiliaryCanInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[26d]"></a>CheckEPM</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, obd.o(i.CheckEPM))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[165]"></a>GetObdData</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, obd.o(i.GetObdData))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GetObdData &rArr; J1939CheckPgn &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939CheckPgn
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765CheckPid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsCheckPid
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCanDataBuf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanData
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[16a]"></a>GetObdPara</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, obd.o(i.GetObdPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetObdPara &rArr; GetUdsPara &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis15765_09Sever
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsMatchTypeNum
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsProtocol
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsEnFlag
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsPara
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obd_init
</UL>

<P><STRONG><a name="[175]"></a>Get_guide</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, obd.o(i.Get_guide))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_guide
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sensor_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[1c7]"></a>ObdCanBaudSet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, obd.o(i.ObdCanBaudSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ObdCanBaudSet &rArr; CanSetBaud &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSetBaud
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolMatch
</UL>

<P><STRONG><a name="[1cc]"></a>ProtocolMatch</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, obd.o(i.ProtocolMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ProtocolMatch &rArr; ObdCanBaudSet &rArr; CanSetBaud &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCanMsg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_15765_canAdd_Blacklist_judge
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanRxMsg
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObdCanBaudSet
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obd_task
</UL>

<P><STRONG><a name="[115]"></a>CheckCanMsg</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, candataanalysis.o(i.CheckCanMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CheckCanMsg &rArr; J1939ProtocolProcess &rArr; J1939MultiFrameProcess &rArr; ReleaseMultiFrameBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanRxMsg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939ProtocolProcess
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765ProtocolProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDataProcess
</UL>

<P><STRONG><a name="[18e]"></a>GetCanDataEmptyBuf</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, candataanalysis.o(i.GetCanDataEmptyBuf))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939ProtocolProcess
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameProcess
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765ProtocolProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameProcess
</UL>

<P><STRONG><a name="[18d]"></a>GetCanDataEmptyBufCnt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, candataanalysis.o(i.GetCanDataEmptyBufCnt))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameProcess
</UL>

<P><STRONG><a name="[161]"></a>GetCanDataFrameCnt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, candataanalysis.o(i.GetCanDataFrameCnt))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanData
</UL>

<P><STRONG><a name="[163]"></a>GetMultiFrameEmptyBuf</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, candataanalysis.o(i.GetMultiFrameEmptyBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetMultiFrameEmptyBuf &rArr; ReleaseMultiFrameBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseMultiFrameBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939ProtocolProcess
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765ProtocolProcess
</UL>

<P><STRONG><a name="[18a]"></a>GetMultiFrameNodeEmptyBuf</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, candataanalysis.o(i.GetMultiFrameNodeEmptyBuf))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939ProtocolProcess
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameProcess
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765ProtocolProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameProcess
</UL>

<P><STRONG><a name="[189]"></a>GetMultiFrameNodeEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, candataanalysis.o(i.GetMultiFrameNodeEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameProcess
</UL>

<P><STRONG><a name="[188]"></a>ISO15765MultiFrameProcess</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, candataanalysis.o(i.ISO15765MultiFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ISO15765MultiFrameProcess &rArr; ReleaseMultiFrameBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCanRxBufDoneFlag
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCanRxBuf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseMultiFrameBuf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultiFrameNodeEnd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultiFrameNodeEmptyBuf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanDataEmptyBufCnt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanDataEmptyBuf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCanDataBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765ProtocolProcess
</UL>

<P><STRONG><a name="[11a]"></a>ISO15765ProtocolProcess</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, candataanalysis.o(i.ISO15765ProtocolProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ISO15765ProtocolProcess &rArr; ISO15765SendFrameFlowCmd &rArr; CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCanRxBufDoneFlag
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCanRxBuf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765SendFrameFlowCmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameProcess
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultiFrameNodeEmptyBuf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultiFrameEmptyBuf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanDataEmptyBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCanMsg
</UL>

<P><STRONG><a name="[190]"></a>ISO15765SendFrameFlowCmd</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, candataanalysis.o(i.ISO15765SendFrameFlowCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ISO15765SendFrameFlowCmd &rArr; CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2SendMsg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1SendMsg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765ProtocolProcess
</UL>

<P><STRONG><a name="[1a5]"></a>J1939MultiFrameProcess</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, candataanalysis.o(i.J1939MultiFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = J1939MultiFrameProcess &rArr; ReleaseMultiFrameBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCanRxBufDoneFlag
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCanRxBuf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseMultiFrameBuf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultiFrameNodeEnd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultiFrameNodeEmptyBuf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanDataEmptyBufCnt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanDataEmptyBuf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCanDataBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939ProtocolProcess
</UL>

<P><STRONG><a name="[119]"></a>J1939ProtocolProcess</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, candataanalysis.o(i.J1939ProtocolProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = J1939ProtocolProcess &rArr; J1939MultiFrameProcess &rArr; ReleaseMultiFrameBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCanRxBufDoneFlag
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCanRxBuf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameProcess
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultiFrameNodeEmptyBuf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultiFrameEmptyBuf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanDataEmptyBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCanMsg
</UL>

<P><STRONG><a name="[164]"></a>ReleaseMultiFrameBuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, candataanalysis.o(i.ReleaseMultiFrameBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReleaseMultiFrameBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCanRxBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;J1939MultiFrameProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15765MultiFrameProcess
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultiFrameEmptyBuf
</UL>

<P><STRONG><a name="[211]"></a>CountSpeedMatchRes</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uds.o(i.CountSpeedMatchRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CountSpeedMatchRes
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsSpeedCompare
</UL>

<P><STRONG><a name="[91]"></a>Datong_TEMP_LQY</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, uds.o(i.Datong_TEMP_LQY))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Datong_TEMP_LQY &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>Datong_engineTorq</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, uds.o(i.Datong_engineTorq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Datong_engineTorq &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>Datong_enginefuelFlow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uds.o(i.Datong_enginefuelFlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Datong_enginefuelFlow
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>Get07_45data</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, uds.o(i.Get07_45data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get07_45data
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>GetNOX_benchi</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, uds.o(i.GetNOX_benchi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetNOX_benchi
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>GetNoxContestJieFang</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, uds.o(i.GetNoxContestJieFang))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetNoxContestJieFang
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>GetNoxContest_HengHe</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, uds.o(i.GetNoxContest_HengHe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetNoxContest_HengHe
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>GetNoxContest_KaiLong</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, uds.o(i.GetNoxContest_KaiLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetNoxContest_KaiLong
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>GetNoxContest_KaiRuiWeiKeSi</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, uds.o(i.GetNoxContest_KaiRuiWeiKeSi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetNoxContest_KaiRuiWeiKeSi
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>GetScrTempJieFang</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, uds.o(i.GetScrTempJieFang))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetScrTempJieFang
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>GetScrTemp_256A_B_Div10_Sub273</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, uds.o(i.GetScrTemp_256A_B_Div10_Sub273))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetScrTemp_256A_B_Div10_Sub273
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>GetScrTemp_HengHe</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uds.o(i.GetScrTemp_HengHe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetScrTemp_HengHe
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>GetScrTemp_KaiLong</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, uds.o(i.GetScrTemp_KaiLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetScrTemp_KaiLong
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>GetScrTemp_KaiRuiWeiKeSi</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, uds.o(i.GetScrTemp_KaiRuiWeiKeSi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetScrTemp_KaiRuiWeiKeSi
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>GetUdsData_100D_Div250</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, uds.o(i.GetUdsData_100D_Div250))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUdsData_100D_Div250
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>GetUdsData_16777216A_65536B_256C_D_Sub270</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, uds.o(i.GetUdsData_16777216A_65536B_256C_D_Sub270))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUdsData_16777216A_65536B_256C_D_Sub270
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>GetUdsData_256A_B</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, uds.o(i.GetUdsData_256A_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUdsData_256A_B
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>GetUdsData_256A_B_Div100</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, uds.o(i.GetUdsData_256A_B_Div100))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUdsData_256A_B_Div100
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>GetUdsData_256A_B_Div2</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, uds.o(i.GetUdsData_256A_B_Div2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUdsData_256A_B_Div2
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>GetUdsData_256A_B_Div4</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, uds.o(i.GetUdsData_256A_B_Div4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUdsData_256A_B_Div4
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>GetUdsData_256A_B_KaiDeSi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uds.o(i.GetUdsData_256A_B_KaiDeSi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsData_256A_B_KaiDeSi
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>GetUdsData_256A_B_Mul625_Div10000_Sub40</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, uds.o(i.GetUdsData_256A_B_Mul625_Div10000_Sub40))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUdsData_256A_B_Mul625_Div10000_Sub40
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>GetUdsData_256A_B_sign</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, uds.o(i.GetUdsData_256A_B_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUdsData_256A_B_sign
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>GetUdsData_ISO15031_100A_Div255</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uds.o(i.GetUdsData_ISO15031_100A_Div255))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsData_ISO15031_100A_Div255
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>GetUdsData_ISO15031_100B_Div255</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uds.o(i.GetUdsData_ISO15031_100B_Div255))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsData_ISO15031_100B_Div255
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>GetUdsData_ISO15031_256A_B_Div10</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uds.o(i.GetUdsData_ISO15031_256A_B_Div10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsData_ISO15031_256A_B_Div10
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>GetUdsData_ISO15031_256A_B_Div10_Sub40</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uds.o(i.GetUdsData_ISO15031_256A_B_Div10_Sub40))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsData_ISO15031_256A_B_Div10_Sub40
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>GetUdsData_ISO15031_256A_B_Div4</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uds.o(i.GetUdsData_ISO15031_256A_B_Div4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsData_ISO15031_256A_B_Div4
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>GetUdsData_ISO15031_256A_B_Mul99_Div1000</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uds.o(i.GetUdsData_ISO15031_256A_B_Mul99_Div1000))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsData_ISO15031_256A_B_Mul99_Div1000
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>GetUdsData_ISO15031_256B_C</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uds.o(i.GetUdsData_ISO15031_256B_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsData_ISO15031_256B_C
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>GetUdsData_YiLiLanJie</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, uds.o(i.GetUdsData_YiLiLanJie))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetUdsData_YiLiLanJie
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>GetUdsSpeed_BoShiYuChai</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uds.o(i.GetUdsSpeed_BoShiYuChai))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsSpeed_BoShiYuChai
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>GetUdsSpeed_HengHe</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uds.o(i.GetUdsSpeed_HengHe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsSpeed_HengHe
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>GetUdsSpeed_KaiDeSi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uds.o(i.GetUdsSpeed_KaiDeSi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsSpeed_KaiDeSi
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>GetUdsSpeed_KaiLong</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uds.o(i.GetUdsSpeed_KaiLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUdsSpeed_KaiLong
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>GetUdsSpeed_KaiRuiWeiKeSi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, uds.o(i.GetUdsSpeed_KaiRuiWeiKeSi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUdsSpeed_KaiRuiWeiKeSi
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>GetUdsUreaLiquidLevel_KaiDeSi</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uds.o(i.GetUdsUreaLiquidLevel_KaiDeSi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUdsUreaLiquidLevel_KaiDeSi
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>GetUreaLiquidLevelJieFang</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, uds.o(i.GetUreaLiquidLevelJieFang))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUreaLiquidLevelJieFang
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>GetUreaLiquidLevel_50Ling</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uds.o(i.GetUreaLiquidLevel_50Ling))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetUreaLiquidLevel_50Ling &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>GetUreaLiquidLevel_HengHe</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uds.o(i.GetUreaLiquidLevel_HengHe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUreaLiquidLevel_HengHe
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>GetUreaLiquidLevel_KaiLong</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, uds.o(i.GetUreaLiquidLevel_KaiLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUreaLiquidLevel_KaiLong
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>GetUreaLiquidLevel_KaiRuiWeiKeSi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, uds.o(i.GetUreaLiquidLevel_KaiRuiWeiKeSi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUreaLiquidLevel_KaiRuiWeiKeSi
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>GetUreaLiquidLevel_benchi</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, uds.o(i.GetUreaLiquidLevel_benchi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUreaLiquidLevel_benchi
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsUpdateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[1e8]"></a>GoToNextStep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uds.o(i.GoToNextStep))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsSpeedCompare
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsReqServer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUdsProtocol
</UL>

<P><STRONG><a name="[79]"></a>HeartResponse</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uds.o(i.HeartResponse))
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>IsUdsCanIdDoneFlagMark</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, uds.o(i.IsUdsCanIdDoneFlagMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsUdsCanIdDoneFlagMark
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMatchNextPro
</UL>

<P><STRONG><a name="[1ee]"></a>StartMatchNextPro</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uds.o(i.StartMatchNextPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StartMatchNextPro &rArr; IsUdsCanIdDoneFlagMark
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsCanIdDoneFlagClear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsUdsCanIdDoneFlagMark
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsSpeedCompare
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsReqServer
</UL>

<P><STRONG><a name="[1ef]"></a>UdsCanIdDoneFlagClear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uds.o(i.UdsCanIdDoneFlagClear))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMatchNextPro
</UL>

<P><STRONG><a name="[20f]"></a>UdsCanIdDoneFlagMark</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uds.o(i.UdsCanIdDoneFlagMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UdsCanIdDoneFlagMark
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsReqServer
</UL>

<P><STRONG><a name="[20d]"></a>UdsSendHeartWithoutResponse</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, uds.o(i.UdsSendHeartWithoutResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UdsSendHeartWithoutResponse &rArr; CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2SendMsg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsReqServer
</UL>

<P><STRONG><a name="[20e]"></a>UdsSendReqCmd</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, uds.o(i.UdsSendReqCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UdsSendReqCmd &rArr; CAN2SendMsg &rArr; CAN_TransmitSTS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2SendMsg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsReqServer
</UL>

<P><STRONG><a name="[210]"></a>UdsSpeedCompare</STRONG> (Thumb, 802 bytes, Stack size 32 bytes, uds.o(i.UdsSpeedCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UdsSpeedCompare &rArr; StartMatchNextPro &rArr; IsUdsCanIdDoneFlagMark
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMatchNextPro
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToNextStep
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountSpeedMatchRes
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdsReqServer
</UL>

<P><STRONG><a name="[129]"></a>UdsUpdateData</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, uds.o(i.UdsUpdateData))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUreaLiquidLevel_benchi
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUreaLiquidLevel_KaiRuiWeiKeSi
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUreaLiquidLevel_KaiLong
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUreaLiquidLevel_HengHe
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUreaLiquidLevel_50Ling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUreaLiquidLevelJieFang
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsUreaLiquidLevel_KaiDeSi
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsSpeed_KaiRuiWeiKeSi
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsSpeed_KaiLong
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsSpeed_KaiDeSi
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsSpeed_HengHe
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsSpeed_BoShiYuChai
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_ISO15031_256B_C
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_ISO15031_256A_B_Mul99_Div1000
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_ISO15031_256A_B_Div4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_ISO15031_256A_B_Div10_Sub40
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_ISO15031_256A_B_Div10
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_ISO15031_100B_Div255
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_ISO15031_100A_Div255
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_256A_B_sign
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_256A_B_Mul625_Div10000_Sub40
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_256A_B_KaiDeSi
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_256A_B_Div4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_256A_B_Div2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_256A_B_Div100
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_256A_B
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_16777216A_65536B_256C_D_Sub270
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsData_100D_Div250
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScrTemp_KaiRuiWeiKeSi
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScrTemp_KaiLong
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScrTemp_HengHe
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScrTemp_256A_B_Div10_Sub273
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScrTempJieFang
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoxContest_KaiRuiWeiKeSi
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoxContest_KaiLong
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoxContest_HengHe
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoxContestJieFang
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNOX_benchi
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get07_45data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_enginefuelFlow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_engineTorq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datong_TEMP_LQY
</UL>

<P><STRONG><a name="[8f]"></a>UpLinkResponse</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uds.o(i.UpLinkResponse))
<BR>[Address Reference Count : 1]<UL><LI> uds.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>SPI1_Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, spi_flash.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[1e4]"></a>SPI1_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_flash.o(i.SPI1_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[f1]"></a>GB17691_send_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gb17691a.o(i.GB17691_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GB17691_send_data &rArr; sim_uart_tx &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_send
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logout_send
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disman_alarm_send
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool_login_send_new
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_resend_data
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_data_put_buf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOL_data_put_buf
</UL>

<P><STRONG><a name="[298]"></a>IsLeapYear</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gb17691a.o(i.IsLeapYear))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_preset
</UL>

<P><STRONG><a name="[151]"></a>check_big_heart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gb17691a.o(i.check_big_heart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_big_heart &rArr; BKP_WriteBkpData
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBkpData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBkpData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_stamp
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
</UL>

<P><STRONG><a name="[145]"></a>get_terminal_connect_status</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gb17691a.o(i.get_terminal_connect_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_terminal_connect_status
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_status
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>

<P><STRONG><a name="[131]"></a>set_time_preset</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, gb17691a.o(i.set_time_preset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_time_preset
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_CMD_analysis
</UL>

<P><STRONG><a name="[147]"></a>update_big_heart_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gb17691a.o(i.update_big_heart_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_big_heart_time &rArr; BKP_WriteBkpData
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBkpData
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_task
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB17691_real_time_upload
</UL>

<P><STRONG><a name="[20b]"></a>IsLeapYear</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gps.o(i.IsLeapYear))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTCTime2LocalTime
</UL>

<P><STRONG><a name="[20a]"></a>UTCTime2LocalTime</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, gps.o(i.UTCTime2LocalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UTCTime2LocalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_gprmc
</UL>

<P><STRONG><a name="[252]"></a>asc2int</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gps.o(i.asc2int))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_gprmc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_frame
</UL>

<P><STRONG><a name="[253]"></a>get_frame_size</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gps.o(i.get_frame_size))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_frame
</UL>

<P><STRONG><a name="[254]"></a>gps_process_gngga</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, gps.o(i.gps_process_gngga))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gps_process_gngga &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_frame
</UL>

<P><STRONG><a name="[255]"></a>gps_process_gprmc</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, gps.o(i.gps_process_gprmc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gps_process_gprmc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2int
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTCTime2LocalTime
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_process_frame
</UL>

<P><STRONG><a name="[10d]"></a>Reflect</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, crc.o(i.Reflect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Reflect
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC32
</UL>

<P><STRONG><a name="[204]"></a>get_uart_send_data</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sim_uart.o(i.get_uart_send_data))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_uart_tx
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[22f]"></a>at_cfslogin</STRONG> (Thumb, 94 bytes, Stack size 88 bytes, sim_net.o(i.at_cfslogin))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = at_cfslogin &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[230]"></a>at_cftpget</STRONG> (Thumb, 398 bytes, Stack size 232 bytes, sim_net.o(i.at_cftpget))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = at_cftpget &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[232]"></a>at_cftpgetfile</STRONG> (Thumb, 370 bytes, Stack size 208 bytes, sim_net.o(i.at_cftpgetfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = at_cftpgetfile &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[233]"></a>at_cftpscacherd</STRONG> (Thumb, 64 bytes, Stack size 88 bytes, sim_net.o(i.at_cftpscacherd))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at_cftpscacherd &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
</UL>

<P><STRONG><a name="[234]"></a>at_cftpscacherd_To_UART</STRONG> (Thumb, 64 bytes, Stack size 88 bytes, sim_net.o(i.at_cftpscacherd_To_UART))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at_cftpscacherd_To_UART &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
</UL>

<P><STRONG><a name="[235]"></a>at_cftpslogout</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sim_net.o(i.at_cftpslogout))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = at_cftpslogout &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[236]"></a>at_cftpssingleip</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sim_net.o(i.at_cftpssingleip))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = at_cftpssingleip &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[237]"></a>at_cftpsstart</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sim_net.o(i.at_cftpsstart))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = at_cftpsstart &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[238]"></a>at_cftpsstop</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sim_net.o(i.at_cftpsstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = at_cftpsstop &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[239]"></a>at_cftrantx</STRONG> (Thumb, 248 bytes, Stack size 208 bytes, sim_net.o(i.at_cftrantx))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = at_cftrantx &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
</UL>

<P><STRONG><a name="[23a]"></a>at_cgatt</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sim_net.o(i.at_cgatt))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = at_cgatt &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[23b]"></a>at_cgpaddr</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sim_net.o(i.at_cgpaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = at_cgpaddr &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[23e]"></a>at_fscd</STRONG> (Thumb, 138 bytes, Stack size 96 bytes, sim_net.o(i.at_fscd))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = at_fscd &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[23f]"></a>at_fsdel</STRONG> (Thumb, 158 bytes, Stack size 144 bytes, sim_net.o(i.at_fsdel))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = at_fsdel &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[240]"></a>at_fsls</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sim_net.o(i.at_fsls))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = at_fsls &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[241]"></a>at_httpaction</STRONG> (Thumb, 86 bytes, Stack size 88 bytes, sim_net.o(i.at_httpaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = at_httpaction &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[242]"></a>at_httpinit</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sim_net.o(i.at_httpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = at_httpinit &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[243]"></a>at_httppara</STRONG> (Thumb, 64 bytes, Stack size 184 bytes, sim_net.o(i.at_httppara))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = at_httppara &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[244]"></a>at_httppara0</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sim_net.o(i.at_httppara0))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = at_httppara0 &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[245]"></a>at_httppreadfile</STRONG> (Thumb, 216 bytes, Stack size 200 bytes, sim_net.o(i.at_httppreadfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = at_httppreadfile &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[247]"></a>check_crc32</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sim_net.o(i.check_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = check_crc32 &rArr; CalcCRC32 &rArr; read_data_from_flash &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_flash
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[248]"></a>check_device_info1</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, sim_net.o(i.check_device_info1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = check_device_info1 &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
</UL>

<P><STRONG><a name="[24d]"></a>get_firmware</STRONG> (Thumb, 594 bytes, Stack size 128 bytes, sim_net.o(i.get_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = get_firmware &rArr; at_cftrantx &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_rx_data_size
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_data_multiple_bytes
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftrantx
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[24e]"></a>get_firmware1</STRONG> (Thumb, 398 bytes, Stack size 136 bytes, sim_net.o(i.get_firmware1))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = get_firmware1 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_rx_data_size
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_data_multiple_bytes
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpscacherd_To_UART
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpscacherd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[24f]"></a>get_firmware_http</STRONG> (Thumb, 356 bytes, Stack size 128 bytes, sim_net.o(i.get_firmware_http))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = get_firmware_http &rArr; at_cftrantx &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTSendOut
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_rx_data_size
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_data_multiple_bytes
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftrantx
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[25b]"></a>is_download_complete</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, sim_net.o(i.is_download_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = is_download_complete &rArr; clear_firmware_info &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_info
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_firmware_info
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[262]"></a>is_update_firmware1</STRONG> (Thumb, 1646 bytes, Stack size 240 bytes, sim_net.o(i.is_update_firmware1))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = is_update_firmware1 &rArr; at_cftrantx &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_rx_data_size
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_data_multiple_bytes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scanf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_device_info1
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftrantx
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_firmware
</UL>

<P><STRONG><a name="[29e]"></a>sim_power_off</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sim_net.o(i.sim_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sim_power_off &rArr; set_sim_pwrkey
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sim_pwrkey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sim_pwrkey
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[29c]"></a>sim_power_on</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sim_net.o(i.sim_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sim_power_on &rArr; turn_off_sim_3v8
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_off_sim_3v8
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_on_sim_3v8
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sim_pwrkey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sim_pwrkey
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[23d]"></a>str_scanf</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, sim_net.o(i.str_scanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_rx_data_size
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sim_rx_byte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_process
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
</UL>

<P><STRONG><a name="[29d]"></a>update_firmware</STRONG> (Thumb, 968 bytes, Stack size 72 bytes, sim_net.o(i.update_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = update_firmware &rArr; is_update_firmware1 &rArr; at_cftrantx &rArr; at_cmd_process &rArr; str_scanf &rArr; get_sim_rx_data_size &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_firmware_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_flash_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_update_firmware1
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_download_complete
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_http
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc32
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httppreadfile
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httppara0
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httppara
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httpinit
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_httpaction
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsls
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsdel
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fscd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cgpaddr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cgatt
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpsstop
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpsstart
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpssingleip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpslogout
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpgetfile
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftpget
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cfslogin
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_net_ctr
</UL>

<P><STRONG><a name="[104]"></a>comupdate_check_crc32</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart.o(i.comupdate_check_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = comupdate_check_crc32 &rArr; CalcCRC32 &rArr; read_data_from_flash &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_flash
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_CMD_analysis
</UL>

<P><STRONG><a name="[1f1]"></a>Sys_Enter_Standby</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sleep.o(i.Sys_Enter_Standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sys_Enter_Standby &rArr; Sys_Standby
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_s
</UL>

<P><STRONG><a name="[1f3]"></a>Sys_Standby</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sleep.o(i.Sys_Standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_Standby
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStandbyState
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Enter_Standby
</UL>

<P><STRONG><a name="[257]"></a>iicAck</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, lkt4305_iic.o(i.iicAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = iicAck
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicRecByte
</UL>

<P><STRONG><a name="[259]"></a>iicCheckAck</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lkt4305_iic.o(i.iicCheckAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iicCheckAck &rArr; iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicStop2
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicSendByte
</UL>

<P><STRONG><a name="[1a7]"></a>iicInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lkt4305_iic.o(i.iicInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iicInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305Init
</UL>

<P><STRONG><a name="[25a]"></a>iicNoAck</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, lkt4305_iic.o(i.iicNoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = iicNoAck
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicRecByte
</UL>

<P><STRONG><a name="[1ab]"></a>iicRecByte</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lkt4305_iic.o(i.iicRecByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iicRecByte &rArr; iicNoAck
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicNoAck
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicAck
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
</UL>

<P><STRONG><a name="[1a9]"></a>iicSendByte</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lkt4305_iic.o(i.iicSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = iicSendByte &rArr; iicCheckAck &rArr; iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicCheckAck
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305SendData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
</UL>

<P><STRONG><a name="[1a8]"></a>iicStart</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, lkt4305_iic.o(i.iicStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = iicStart
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305SendData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
</UL>

<P><STRONG><a name="[1aa]"></a>iicStop1</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, lkt4305_iic.o(i.iicStop1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = iicStop1
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305RecData
</UL>

<P><STRONG><a name="[1ac]"></a>iicStop2</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, lkt4305_iic.o(i.iicStop2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = iicStop2
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKT4305SendData
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicCheckAck
</UL>

<P><STRONG><a name="[1d3]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
</UL>

<P><STRONG><a name="[1d4]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32g45x_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
</UL>

<P><STRONG><a name="[1f5]"></a>SetSysClock</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, system_n32g45x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2a7]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>

<P><STRONG><a name="[2a2]"></a>rt_ms2tick</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[2ab]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[2ac]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[27e]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[289]"></a>rt_ret_regs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_regs))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>

<P><STRONG><a name="[22b]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21c]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[22d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[69]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[6a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[bf]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[67]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
