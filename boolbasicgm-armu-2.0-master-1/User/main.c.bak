

#include "cmsis_os.h"                   // ARM::CMSIS:RTOS:Keil RTX
#include "includes.h"
#include "utils.h"
#include "wkup.h"

#include "iwdg.h"

#include "sim_net.h"

#include "GB17691A.h"
//#include "GB17691_CAN_GPS.h"
#include "gps.h"

#include "spi_flash.h"
#include "sleep.h"
#include "power_ctl.h"
#include "obd.h"

#include "udsservice.h"

#include "bsp.h"

#include "TerminalTest.h"

//#define debug 1


//-------------------------------
	u8	iwdg_net=0;							//¿´ÃÅ¹·¼ÆÊý
	u8	iwdg_main=0;
	u8	iwdg_gps=0;
//-----------
  u8 DMATX_len=0;			// DMA·¢ËÍ³¤¶È¡
	
//  SIM868 ½ÓÊÕBUFF	
//u8 SIM868_RXBUF[SIM868RXBUF_SIZE]={0};
//u16 SIM868_RX=0;




//SIM868 ÁªÍø²ÎÊý
//u8 air800_count=0;
u8 log_state=0;
u8 net_state=0;		
//-------------»¥³âËø¶¨Òå
osMutexDef(spiflash_mtx);
osMutexId  spiflash_mtx_id;
osStatus   spi_state;

//-----ÍøÂçÏß³Ì¶¨Òå---------
//void net_up(void const *argument);
//osThreadId tid_net_up;
//osThreadDef(net_up, osPriorityNormal, 1, 0);


////-----²É¼¯Ïß³Ì¶¨Òå---------
////void can_collection(void const *argument);
//osThreadId tid_can_collection;
//osThreadDef(obd_task, osPriorityNormal, 1, 1024);

//void can_collection(void)
//{
//	tid_can_collection = osThreadCreate (osThread(obd_task), NULL);
//}


extern uint32_t time_cnt;



int main(void)
{
	for(uint16_t i=0xffff;i>0;i--); //ÑÓÊ±µÈ´ýÍâ²¿ÔªÆ÷¼þ×¼±¸¾ÍÐ÷¡£ 
  
	power_ctl_gpio_init();
	IWDG_Init(6,3750);;//¿´ÃÅ¹·³õÊ¼»¯,  Òç³öÊ±¼ä4S    £¨4*2^6£©*625/40
	
	gps_uart_init(9600);
	RS232_USART_Config(115200);   //20190326_lycadd
#ifdef debug	
	USARTSendOut(RS232_USART,"DEBUG USART CONFIG!\r\n",21);
#endif
	
	My_RTC_Init();
	W25QXX_Init();
	
//	SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH. */	 
	osKernelInitialize();
//	uart_gps_rx_queue_init();
	//rtos_task_create((void *)main_task,0,"m",0,0);
	can_collection();
	CreateUDStask();
	sim_net_task_init();
	GB17691_task_init();
	
	osKernelStart();
    while(1)
    {

			osDelay(2000);
		//	USARTSendOut(USART1,"DEBUG USART CONFIG!\r\n",21);	
			TerminalTestProcess();
			IWDG_Feed();			
			is_sleep();
			

    }
}
